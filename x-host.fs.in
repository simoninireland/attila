\ $Id$

\ Driver file for host cross-compilation

\ Load the cross-compiler
include cross-compiler/cross-compiler.fs

.( Initialising cross-compiler view of target VM...)
<cross-compiler also cross-compiler
include vm.fs
cross-compiler>

.( Initialising cross-compiler target image...)
<code-generator
initialise-image
code-generator>

.( Initialising image with really basic primitives...)
<target
C: USERVAR uservar ( n -- addr )
  addr = (CELL) &image[n];
;C

include c-core.fs
include c-itil.fs
target>

.( Initialising cross-compiler loop support...)
<cross-compiler
include cs-stack.fs
include loop-support.fs
cross-compiler>

.( Loading cross-compiler loop words...)
<cross-compiler also cross-compiler
include conditionals.fs
include loops.fs
include counted-loops.fs
: START-DEFINITION ;
: END-DEFINITION ;
include createdoes.fs
cross-compiler>

.( Populating target image...)
<target
include ascii.fs
include c-fileio.fs
include c-io.fs
include counted-loops-runtime.fs

include flat-memory-model.fs
include itil-compilation.fs
include compilation.fs
include colon.fs

include executive.fs
include file.fs
include load.fs
target>

.( Finalising target image...)
[code-generator] FINALISE-IMAGE
<TARGET
' COLD  COLDSTART XT! \ cold start vector (first word executed)
' OUTER EXECUTIVE XT! \ executive (outer interpreter)
TARGET>

.( Saving target image...)
[CODE-GENERATOR] SAVE-IMAGE-AS attila.c

.( Done)

