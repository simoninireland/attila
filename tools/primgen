#!/usr/bin/perl

# $Id$

# This file is part of Attila, a retargetable threaded interpreter
# Copyright (c) 2007--2009, Simon Dobson <simon.dobson@computer.org>.
# All rights reserved.
#
# Attila is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Attila is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.

# Primitive generator
# This script is used to bootstrap the primitives in an initial build
# of Attila. It reads "ordinary" Attila source files and extracts
# primitive definitions, which it then spits out as C code to be used
# to construct the virtual machine.
#
# Primitive declarations looks like this:
#
# PRIMITIVE: name [primname] ( before -- after ) [pronunciation]
#    code
# ;PRIMITIVE
#
# where name is the (Attila-level) name of the primitive being defined;
# before and after are possibly empty lists of data stack items;
# primname is the optional C-level name of the primitive, used only when
# one piece of primitive C code needs to refer to another; pronunciation
# is an aid to pronunciation if it's not completely clear; and code is
# the C code for the primitive. 
#
# primgen synthesises, for each primitive, a C routine of the form:
# void
# primname() {
#    parameters
#    code
#    results
# }
#
# where parameters maps the list of before names to C variables of type CELL;
# code is the literal code for the primitive; results pushes the after names
# onto the stack; and next ends the primitive. The C code can thus refer to
# parameters and results by name, with primgen taking care of the stack
# accesses.
#
# Some C compilers are sticky about declarations in the middle of functions,
# so primitives should be coded with any declarations at the front of their
# code followed by a blank line. primgen will separate these declarations
# into the parameters section before any generated code. The corrolary to
# this is that code, in general, shouldn't have blank lines in it.
#
# Some sets of primitives need support code, headers etc. primgen recognises
# literal C text bracketed, i.e.:
#
# C:
# #include <stdlib.h>
#
# #define VERSION "0.1"
# ;C
#
# which will be emitted directly into the C file. 

use strict;
use List::Util;
use Getopt::Long;
use File::Basename;

my $primgen = "primgen";
my $version = "0.1";
my $timestamp = localtime();
my $cfile = undef; 
my (@fpfile, $fn);
my $verbose = 0;
my %primitive = ();
my ($declarations, $functions);


# Declaration parser
sub parsePrimitives {
    my ($line, $rc);
    my ($word, $prim, @in, @out, $pronounce, $decl, $code, $f, $summary);
    my ($ins, $outs);

    # process each primitive or declaration
    while($line = <PRIMS>) {
	if($line =~ /^PRIMITIVE:\s+([^\s]+)\s+(([a-zA-Z0-9_]+)\s+)?\(([^-]*)--([^-]*)\)(\s*"([^"]+))?/) {
	    # we're in a primitive to extract the elements
	    $word = $1;
	    $prim = $3;   $prim = primName($word) unless($prim);
	    $ins = $4;
	    $outs = $5;
	    $pronounce = $7;
	    if($pronounce) {
		$pronounce =~ s/^\s+//;
		$pronounce =~ s/\s+$//;
	    }

	    # split the stack parameters
	    $ins =~ s/^\s+//;   $ins =~ s/\s+$//;   @in = split(/\s+/, $ins);
	    $outs =~ s/^\s+//;   $outs =~ s/\s+$//;   @out = split(/\s+/, $outs);

	    # read the code and/or declarations for the primitive
	    $code = $decl = "";
	  codeline: while($line = <PRIMS>) {
	      if($line =~ /^;PRIMITIVE/) {
		  # we're done
		  last codeline;
	      } elsif(($line =~ /^\s*$/) && !$decl) {
		  # if this is the first blank line, what came before
		  # is declarations
		  $decl = $code;   $code = "";
	      } else{
		  # code
		  $code .= $line;
	      }
	  }
	    $code =~ s/^\s*$//mg;
	    
	    # generate and record the primitive's code
	    ($f, $summary) = generatePrimitive($word, $pronounce, $prim, \@in, \@out, $decl, $code);
	    $functions .= $f;
	    print "$summary\n" if($verbose);
	} elsif($line =~ /^C:/) {
	    # we're in a header declaration, extract the code
	    $code = "";
	  declline: while($line = <PRIMS>) {
	      if($line =~ /^;C/) {
		  last declline;
	      } else {
		  $code .= $line;
	      }
	  }

	    # record the declaration
	    $declarations .= $code;
	}
    }
}


# Primitive name generator -- very primitive...
my $unique = 0;
sub primName {
    my $word = shift; # unused in this version 
    $unique++;
    return "prim$unique";
}


# Remove any duplicate instances of a string in a list
sub uniquify {
    my %keys = ();
    my $n;
    foreach $n (@_) {
	$keys{$n} = 1;
    }
    return keys(%keys);
}


# Code generator
sub generatePrimitive {
    my ($word, $pronounce, $prim, $in, $out, $decl, $code) = @_;
    my (@names, $alldecl, $pop, $push, $f, $summary);

    # parameter declarations
    @names = uniquify (@$in, @$out);
    $alldecl = join("\n", (map { "CELL $_;"} @names));
    $alldecl .= "\n$decl" if($decl);

    # parameter pops and pushes
    $pop = join("\n", (map { "$_ = POP_CELL();" } (reverse @$in)));
    $push = join("\n", (map { "PUSH_CELL($_);" } @$out));

    # summary string
    $summary = $word . " ( " . (join(" ", @$in)) . " -- " . (join (" ", @$out)) . " )"; 

    # fill in primitive template
    $f = "// $summary
VOID
$prim( XT _xt ) {
$alldecl
$pop
$code
$push
}

";
    
    # record the name and routine in the primitives table
    die "Duplicate primitive $word encountered" if($primitive{$word});
    $primitive{$word} = $prim;

    # return the function definition and summary
    return ($f, $summary);
}


# Generate the overall output
sub generatePrimitiveFile {
    my $prims = "";
    my ($word, $prim);
    
    # generate the prototypes
    while(($word, $prim) = each(%primitive)) {
	$prims .= "   COMPILE_PRIMITIVE(\"$word\", &$prim);\n";
    }

    print C <<EOC
// Generated by $primgen version $version -- DO NOT EDIT BY HAND

#include "vm.h"
#include "primgen.h"

$declarations

$functions

VOID
init_primitives() {
$prims
}

// Generated $timestamp
EOC
}


# Help information
sub help {
    print <<EOH;
primgen - generate Attila VM from primitives

usage: primgen [options] primfile ...
options:
  -o cfile, --output cfile    Send C output to cfile. If not
                              specified the C code goes to a
			      file named for the first primitive
			      file, replacing its extension with .c
  -v, --verbose               Verbose output
  -h, --help                  Show this help
EOH
    exit(0);
}


# Main program
my $rc = GetOptions("output|o=s"  => \$cfile,
		    "verbose|v"   => \$verbose,
		    "help|h"      => \&help,
    );
@fpfile = @ARGV;   help() unless(scalar(@fpfile) > 0);
unless($cfile) {
    # use same stem of first primitive file if no explicit C target given
    my ($fn, $dir, $suf) = fileparse($fpfile[0], qr#\.[^.]*#);
    $cfile = "$fn.c";
}

# Generate the code for the primitives
while($fn = shift(@fpfile)) {
    open PRIMS, "<$fn" or die "Can't open primitives file $fn";
    print "$fn...\n" if($verbose);

    # record where the primitives and declarations come from
    $functions .= "// $fn:\n\n";
    $declarations .= "// $fn:\n\n";

    parsePrimitives();
    close PRIMS;
}

# Generate the final C file
open C, ">$cfile" or die "Can't open VM file $cfile";
generatePrimitiveFile();
close C;

