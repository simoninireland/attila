#!/bin/sh

# $Id: build-bootstrap.sh.in,v 1.1.1.1 2007/02/09 12:54:37 sd Exp $

# This file is part of Attila, a multi-targeted threaded interpreter
# Copyright (c) 2007, UCD Dublin. All rights reserved.
#
# Attila is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# Attila is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.

# build-bootstrap.sh -- build a bootstrap dictionary from the primitives
#
# This code works by assuming that the primitives are defined in 
# C source files that follow a stylised format. Each function
# is assumed to be a primitive, which in turn is a void function of no
# arguments whose interactions occur via the TIL stacks. Furthermore,
# each primitive is preceded by a comment of the form
#
# // PRIMITIVE name ( a b -- c ) IMMEDIATE
#
# where name is the primitive name and ( a b -- c ) is the (currently
# ignored) stack effect. We then generate a file containing a single
# function build_bootstrap_dictionary which constructs a dictionary holding
# all the primitives. Note that primitives cannot (in this model) be
# IMMEDIATE: you can change this later if you need to (although you
# probably never will)
#
# Anyone familiar with Gforth will recognise this as a broken and inferior
# version of vmgen... :-)

# arguments
if test "$#" -lt "2"; then
    echo "usage: build-bootstrap.sh <primitive-table> <primitive-source> ..."
    exit 1
fi

bootstrap=$1
shift
source=$*
primitives=primitives.txt
functions=functions.txt

# extract primitive names and function names from source 
@CAT@ $source | @EGREP@ '// PRIMITIVE' | cut -d ' ' -f 3 >$primitives
@CAT@ $source | @EGREP@ '^[a-zA-Z0-9_]+\(\)' | cut -d ' ' -f 1 | sed -e 's/()//g' >$functions

# sanity checks
nprimitives=`wc -l <$primitives`
nfunctions=`wc -l <$functions`
if test "$nprimitives" -ne "$nfunctions"; then
    echo "Number of primitives declarations ($nprimitives) doesn't match number of functions ($nfunctions)"
    exit 1
fi
nuniques=`uniq $primitives | wc -l`
if test "$nprimitives" -ne "$nuniques"; then
    echo "Duplicate primitive names"
    exit 1
fi

# header
datestamp=`date`
cat >$bootstrap <<EOF
// Generated by build-bootstrap.sh - DO NOT EDIT BY HAND
// Generated $datestamp

EOF

# generate primitive headers
@PASTE@ -d ' ' $primitives $functions | @AWK@ '{ printf("extern void %s();\n", $2); }' >>$bootstrap

# compile each primitive
cat >>$bootstrap <<EOF

void
build_bootstrap_dictionary() {
EOF
@PASTE@ -d ' ' $primitives $functions | @AWK@ '{ printf("   compile_primitive(\"%s\", &%s, 0);\n", $1, $2); }' >>$bootstrap
cat >>$bootstrap <<EOF
}
EOF

# tidy up
rm $primitives $functions
