\input texinfo  @c -*-texinfo-*-

@setfilename attila.info
@settitle Attila: an abstract threaded interpreter

@documentencoding iso-8859-1

@iftex
@finalout
@end iftex

@ifinfo
@macro startwords{}
@multitable @columnfractions 0.2 0.4 0.12 0.12
@end macro

@macro word{name, stack, pro, package}
@findex \name\
@item @code{\name\} @tab @verb{~\stack\~} @tab \pro\ @tab \package\
@end macro

@macro endwords{}
@end multitable
@end macro
@end ifinfo

@iftex
@macro startwords{}
@end macro

@macro word{name, stack, pro, package}
@findex \name\
@noindent \name\ \stack\ \pro\ \package\ @*
@end macro

@macro endwords{}
@end macro
@end iftex


@titlepage
@title Attila: an abstract threaded interpreter
@author Simon Dobson
@end titlepage



@node Top, Preface, (dir), (dir)
@top Attila

Attila is an abstract threaded interpreter for FORTH-like
languages. It is intended to be lightweight, portable, re-targetable
and suitable for use as a target for other language technologies.

This documentation is for version 0.1.

@menu
* Preface::                     
* Introduction::                
* Installation::                
* Starting the system::         
* User guide::                  
* Internals guide::             
* Porting guide::               
* Word index::                  
* Concept index::               
* Appendix References and further information::  
* Appendix The GNU General Public License::  
* Appendix The GNU Free Documentation License::  
@end menu

@node Preface, Introduction, Top, Top
@chapter Preface

This manual is for Attila version 0.1.

Last modified $Date: 2007/05/23 15:41:48 $.

@menu
* Copyright::                   
* Notation::                    
* Naming conventions::          
@end menu

@node Copyright, Notation, Preface, Preface
@section Copyright

@quotation
Copyright (c) 2007, UCD Dublin. All rights reserved.
@end quotation

@quotation
Permission is granted to copy, distribute and/or modify this
document under the terms of the GNU Free Documentation License,
Version 1.2 or any later version published by the Free Software
Foundation; with no Invariant Sections, with the Front-Cover texts
being ``A GNU Manual'', and with the Back-Cover Texts as in (a)
below. A copy of the license is included in the section entitled
``GNU Free Documentation License'' in this manual.
@end quotation

@quotation
(a) The Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software. Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation

@quotation
This document is part of a collection distributed under the GNU Free
Documentation License. If you want to distribute this document
separately from the collection, you can do so by adding a copy of
the license to the document, as described in section 6 of the
license.
@end quotation


@node Notation, Naming conventions, Copyright, Preface
@section Notation

Within this documentation, all Attila words appear in typewriter
face, as in @code{DUP}.

All word descriptions take the standard form name, stack effect,
pronunciation, as in

@startwords
@word{DUP,( n---n n ),``dup'',}
@endwords

The stack effect has the before and after stack pictures separated by
---. Stack pictures are written left-to-right, so the rightmost item is
the top of the stack. If a word has compile-time and run-time stack
effects, then the stack effects will be shown separately, as in

@startwords
@word{IF,compile:( ---falseaddr ) runtime:( f--- ),,}
@endwords

The compile:(@dots{}) stack is the compile-time behaviour, the
runtime:(@dots{}) the run-time behaviour of the data stack.

If we need to denote the behaviour of the return stack, we use stack
pictures of the form (R: r---r r ). There are also other stacks used
for some purposes.



@node Naming conventions,  , Notation, Preface
@section Naming conventions

In Attila all words are created equal in the sense that everything
can be re-defined, re-implemented and reproduced using the basic
mechanisms of the threaded virtual machine. This is potentially
confusing, so the following loose naming conventions are adopted:

@itemize @bullet
@item
Internal words, used to implement features but not normally used
directly, are named in brackets with a name that reflects their
``outer'' usage. For example, the word @code{(LITERAL)} is the internal
word used to implement (integer) literals, and is closely related to the
word @code{LITERAL}
@item
Immediate words that are used to perform computations during the
compilation of other words are named in square brackets. For example the
word @code{[']} is used to immediately (at compile time) to place the
address of the following word into the stack, which is closely related
to the behaviour of the ordinary word @code{'}
@item
Names beginning with a hash are used for compiler directives, for
example @code{#INCLUDE}. These may still be compiled if required, but
are typically used interactively directly from the terminal
@end itemize

These conventionns really @emph{are} loose, and are broken in a few
places for convenience of convention. For example, the word
@code{LITERAL} is immediate and so should really be @code{[LITERAL]},
but the former is the conventional usage in other TILs and so has been
retained.



@node Introduction, Installation, Preface, Top
@chapter Introduction

Attila is an abstract threaded interpreter in the spirit of Forth80,
FIG-Forth and Gforth.

Why another Forth? Modern implementations of threaded interpretive
languages (TILs) tend to be large and highly optimised. While one
@emph{can} reduce them to a smaller footprint, there is a tendency for
them to grow and exploit the features found on modern desktop and
PDA-scale machines.

TILs evolved originally at the other end of the spectrum: as controllers
for embedded hardware, and as high-level languages for use as
alternatives to interpreted BASIC on 8-bit hobbyist microcomputers which
could not adequately run complex compilers such as those required for
Pascal and C.

The goals of Attila are:

@itemize @bullet
@item
To be @emph{minimal} and operate on small-footprint devices such as
embedded microcontrollers
@item
To be @emph{extensible}, allowing new primitives to be defined as
required
@item
To be @emph{modular}, so that language features can be included only
where needed to reduce the footprint still further
@item
To be @emph{portable} across a range of platforms, including Unix,
Windows, PDAs and embedded cross-compilers
@item
To be @emph{abstract} to facilitate experiments with new techniques and
optimisations for TILs
@item
To be @emph{targetable} by other language tools, so as to act as a
portable, lightweight virtual machine for more complex languages
and language experiments.
@end itemize


@node Installation, Starting the system, Introduction, Top
@chapter Installation

Attila uses GNU autoconf (@uref{http://www.gnu.org/software/autoconf/}) as a
basis for its portability. To install, unpack the distribution and
type:

@example
> ./configure
> make all
> sudo make install
@end example

You may provide other options to configure, the most common being
---prefix <dir> to set the installation base directory. See the file
INSTALL for more options. By default Attila installs itself into /usr
on Unix machines, installing a binary called attila.


@node Starting the system, User guide, Installation, Top
@chapter Starting the system

@cindex Running
@cindex Command-line arguments

Attila is intended to start cleanly and minimally. Once installed
(@pxref{Installation}) the following command should start
the system:

@example
> attila
Attila v.0.3: an abstract multi-target threaded interpreter
Copyright (c) 2007, UCD Dublin. Distributed under the GNU GPL
 ok
@end example

(If it doesn't, make sure Attila is installed in a directory on your
path. On Unix systems Attila will typically be installed into
/usr/bin/attila or /usr/local/bin/attila, but may have landed somewhere
else.)

Attila understands the following arguments:

@multitable @columnfractions 0.25 0.75
@item @option{-I <dir>} @tab Include @option{<dir>} in the include path for
including source code
@item @option{-n} @tab Don't load the standard profile by default
@item @option{-p <prelude>} @tab Use @option{<prelude>} as the standard
prelude instead of @file{prelude.fs}
@item @option{-h} @tab Show usage
@end multitable


@node User guide, Internals guide, Starting the system, Top
@chapter User guide

Attila cleaves very close to the ANS Forth standard, and so can be
programmed just like a normal Forth compiler. The following sections
deal with each feature of the language in more detail. Please note that
not all features @emph{have} to be available (although all are by
default): by changing the profile features may be included or omitted as
required.

@menu
* The structure of an Attila program::  
* Data types::                  
* Machine dependencies::        
* Loading code from disc::      
* Data stack::                  
* Arithmetic::                  
* Defining new words::          
* Compile and interpret modes::  
* Accessing memory::            
* Variables and constants::     
* Defining new defining words::  
* Return stack::                
* Conditionals::                
* Logical operations::          
* Loops::                       
* Counted loops::               
* Exiting loops::               
* General stacks::              
* Strings and printing::        
* Number input::                
* Number output::               
* Vocabularies::                
* File access::                 
@end menu

@node The structure of an Attila program, Data types, User guide, User guide
@section The structure of an Attila program

@cindex Program structure
@cindex Word

Attila programs are structured using ``words''. Words serve the same
purpose in Attila as subroutines or functions do in more conventioanl
programming languages: they allow a fragment of code to be identified,
named, and re-used from several points in the program' execution.

The difference is that words offer very fine-grained decomposition. A
typical word in Attila is built from five or six other words. Large
words are very rare, and often indicate poor style. Once a word has
been defined, it can be used in the definitions of other words, and
(usually) from the command line.

The other significant feature of words is that they communicate with
other words @emph{via} a stack. A word typically expects to be passed
some arguments, which will appear on the top of the stack. It will use
these arguments to perform its function, and leave zero or more results
on the stack for its caller to use. A word does not care where its
arguments came from, how they will be used, or how deeply nested it is:
it simply manpulates the values near the top of the stack. It is
considered @emph{very} poor style to expect items other than the ones
explicitly needed and documented.


@node Data types, Machine dependencies, The structure of an Attila program, User guide
@section Data types

@cindex Machine dependencies
@cindex Data types
@cindex Cell
@cindex Character
@cindex String

Attila understands the following data types:

@itemize @bullet
@item
cells, currently the same width as ints in the underlying C compiler
@item
characters, currently 8 bits
@item
strings, represented on the stack as a base address and (one-byte) count
@end itemize

Double-precision integers, floating-point numbers and unsigned numbers
are currently unsupported, although Attila does include some of the
double-precision words such as @code{2DROP} that are of general
usefullness.


@node Machine dependencies, Loading code from disc, Data types, User guide
@section Machine dependencies

Since Attila is an abstract machine it does not define some core
values on a global basis. Instead, these are provided by the compiler
and exposed as words.

@startwords
@word{CELL,( -- cellsize ),,}
@endwords

@code{CELL} returns the number of bytes in a cell, used for pointers and
single-precision integers.

@startwords
@word{MAX-INT,( -- max ),,} 
@word{MIN-INT,( -- min ),,}
@endwords

@code{MIN-INT} and @code{MAX-INT} return the smallest and largest representable
single-precision (cell-sized) signed integer respectively.


@node Loading code from disc, Data stack, Machine dependencies, User guide
@section Loading code from disc

@cindex Loading code

@startwords
@word{LOAD,( addr len--- ),,}
@word{#INCLUDE, ( ``filename''--- ),``hash-include'',}
@endwords

@code{LOAD} reads a string from the stack and attempts to locate it as a
file. If it can be found, it loads it as though its contents were
typed-in on the terminal, typically introducing new definitions to the
system.

@code{#INCLUDE} is a compiler directive that reads the filename immediately
following in the input stream and loads it using @samp{LOAD}.

Calls to @code{LOAD} -- and hence to @code{#INCLUDE} -- can be nested
arbitrarily, so source files can load other source files.


@node Data stack, Arithmetic, Loading code from disc, User guide
@section Data stack

@cindex Data stack

The data stack is the primary way in which words communicate, passing
parameters and returning values. Most use of the data stack in Attila
is implicit: words by default expect to use the stack for all their
local storage and exchange.

A number typed in at the command line will place the corresponding
number onto the data stack. This is known as an integer literal. In
compile mode, an integer literal will place the number on the stack
when the compiled word is executed (@pxref{Compile and interpret modes}).

The effect a word has on the data stack is recorded in its stack
picture (@pxref{Notation}).

A number of words manipulate the contents of the stack:

@startwords
@word{DUP,( a---a a ),``dupe'',}
@word{SWAP,( a b---b a ),,}
@word{DROP,( a---),,}
@word{2DROP,( a b--- ) ,``two-drop'',}
@word{NIP,( a b---b ),,}
@word{TUCK,( a b---b a b ),,}
@word{ROT,( a b c---c a b ),,}
@word{-ROT,( a b c---b c a ),``minus-rot'',}
@word{PICK,( ni @dots{} n2 n2 i---ni @dots{} n2 n2 ni ),,}
@word{ROLL,( ni @dots{} n2 n1 i---n1 ni @dots{} n2 ),,}
@word{-ROLL, ( ni nj @dots{} n2 n1 i---nj @dots{} n2 n1 ni ),``minus-roll'',}
@endwords

Of these words, the only ones not self-evident are @code{PICK}, @code{ROLL} and
@code{-ROLL}. @code{PICK} selects the i'th element from the top of the stack,
counting from 1 (the top) but @emph{not} including the index itself. @code{ROLL}
anmd @code{-ROLL} work in the same way, rolling the top i elements not
including the number i itself.

@startwords
@word{DEPTH,( ---n ),,}
@endwords

@code{DEPTH} places the depth of the stack onto the stack, without counting
the depth value itself.

@startwords
@word{.S,( --- ),``dot-ess'',formatting.fs}
@endwords

Prints the complete stack without affecting it in any way. The stack
is printed like a stack picture, top item to the right, with the
number of elements in angle-brackets at the front:

@example
 1 2 3 4 .s
<4> 1 2 3 4 ok
@end example


@node Arithmetic, Defining new words, Data stack, User guide
@section Arithmetic

@cindex Arithmetic

Addition in Attila by default works to the resolution of cells,
whatever size they are (typically 4 bytes). All the normal operations
are available:

@startwords
@word{+,( a b---a+b ),``plus'',}
@word{-,( a b---a-b ),``minus'',}
@word{*,( a b---a*b ),``times'',}
@word{/,( a b---a/b ),``div'',}
@word{MOD,( a b---a%b ),,} 
@word{MAX,( a b---max(a b) ),,} 
@word{MIN,( a b---min(a b) ),,} 
@word{NEGATE,( a---1-a ),,}
@endwords

A few words optimise common actions:

@startwords
@word{1+,( a---a+1 ),``1 plus'',}
@word{1-,( a---a-1 ),''1 minus'',}
@word{2/,( a---a/2 ),``2 divide'',}
@word{2*,( a---a*2 ),``2 times'',}
@endwords

These words simply perform the given operations as primitives rather
than through the data stack. This can be somewhat faster---
dramatically so for systems with highly optimised stack handling.

The available bit-level operations are:

@startwords
@word{AND,( a b---a&b ),,}
@word{OR,( a b---a|b ),,}
@word{XOR,( a b---a~b ),``ex-or'',}
@word{INVERT,( a---~a ),,}
@word{LSHIFT,( a n---a<<n ),``el-lshift'',}
@word{RSHIFT,( a n---a>>n ),``ar shift'',}
@endwords

@code{INVERT} performs a bit-level inversion of a number, which is
@emph{not} the same as a logical @code{NOT} (@pxref{Logical
operations}). @code{LSHIFT} and @code{RSHIFT} perform left and right
shifts without carry, with the leftmost (or rightmost) bits being
discarded.


@node Defining new words, Compile and interpret modes, Arithmetic, User guide
@section Defining new words

Attila programs are made up of words, and the core behaviour of the
system is to compile new definitions of words. In this section we will
show the common word-defining operation, but flexible use of the
compiler requires understanding it in somewhat more detail
(@pxref{Compile and interpret modes}).

@startwords
@word{:,( ``name'' --- ),``colon'',}
@word{;,( --- ),``semi'',}
@endwords

To define a new word we use the @code{:} word (which gives rise to the term
``colon-definitions'' to mean normal Attila words). @code{:} reads the name of
the word from the input and then uses all the words up to @code{;} as the
body of the word. For example,

@example
: ADD-AND-MULTIPLY ( a b c -- c*b+a ) * + ;
@end example

The words @code{*} and @code{+} are compiled, not executed as they would have been
if they were typed-in normally. Instead they are executed when
@code{ADD-AND-MULTIPLY} is executed.

It is important to realise that most of Attila is composed of
colon-definitions: they are, with some limitations and a few
subtleties, flexible enough to create most of the behaviour we see in
the language, including most of the compiler itself.



@node Compile and interpret modes, Accessing memory, Defining new words, User guide
@section Compile and interpret modes

@cindex Mode
@cindex Compilation
@cindex Interpretation

Threaded interpreters get a lot of their power from the mixing-up of
compilation and interpretation. In a traditional language these modes
are strictly separated and individually complex; in a TIL they are
closely intertwined and individually extremely simple.

@menu
* Interpret mode::              
* Compilation mode::            
* Entering compilation mode::   
* Interpreting in compilation model::  
* IMMEDIATE words::             
@end menu

@node Interpret mode, Compilation mode, Compile and interpret modes, Compile and interpret modes
@subsection Interpret mode

In interpret mode, anything typed into the system is @emph{interpreted} and
responded to immediately.

@example
 1 2 +
3 ok
@end example

The same applies to many other words, notably the stack
operations. Some words are @emph{not} available directly, however, including
the looping and conditional words.


@node Compilation mode, Entering compilation mode, Interpret mode, Compile and interpret modes
@subsection Compilation mode

In compilation mode, anything entered into the system, is @emph{compiled} for
later execution. In compilation mode there is almost always a new word
being created. The purpose of compilation mode is to specify the
behaqviour that should occur @emph{when that word is executed}.

If we are in compile mode and enter @code{DUP} (for example), the system
compiles the behaviour of @code{DUP} to be executed when the word being
compiled is executed, either directly (by being typed in in interpret
mode) or indirectly (through being included compiled into the
definition of another word that is being executed).


@node Entering compilation mode, Interpreting in compilation model, Compilation mode, Compile and interpret modes
@subsection Entering compilation mode

Compilation mode is entered by invoking a defining word. The most common
is a ``colon-definition'' (@pxref{Defining new words}), which introduces
a ``normal'' word that, when executed, will replay the words included in
its definition. More complex options are also possible by creating new
defining words (@pxref{Defining new defining words}).

To fully leverage the compiler you need to understand the way words are
defined and layed-out (@pxref{The layout of words}). However, simple
usage is very straightforward.


@node Interpreting in compilation model, IMMEDIATE words, Entering compilation mode, Compile and interpret modes
@subsection Interpreting in compilation model

It is sometimes useful, when compiling a word, to be able to perform
some computation immediately.

A good example might be when you want to compile a value resulting
from a complex calculation: you could compile the calculation, but
that would be wasteful as it would be repeated at run-time. A better
way, if the value is fixed, is to compute it and then compile
the @emph{value}, rather than the @emph{computation}, into the word.

@startwords
@word{[,( --- ),``open-square'',}
@word{],( --- ) ,``close-square'',}
@word{LITERAL,compile:( n--- ) runtime: ( ---n ),,} 
@endwords

Executing @code{[} places Attila into interpret mode; executing @code{]}
places it into compilation mode. When compiling, we can put the system
temporarily into interpret mode, perform a calculation, and then go back
into compile mode.

Using the example above, we might do the complex calculation between
square brackets. This however places a value on the stack @emph{at
compile time}, wheras we want to access the value @emph{at run
time}. The word @code{LITERAL} takes a value from the stack and compiles
it as an integer literal: when the word being defined executes, the
value will be placed on the stack. A example will probably explain
things:

@example
: COMPLEX-WORD
   2 [ 3 4 5 COMPLEX-CALCULATION ] LITERAL + ;
@end example

This will start compiling @code{COMPLEX-WORD}, compile @code{2} as a
literal, and then drop into interpret mode to evaluate @code{3 4 5
COMPLEX-CALCULATION}, which will presumably leave a value on the
stack. @code{LITERAL} will then turn this value into a compiled literal,
whcih will---when @code{COMPLEX-WORD} is executed, be added to @code{2}
to produce the final value.


@node IMMEDIATE words,  , Interpreting in compilation model, Compile and interpret modes
@subsection IMMEDIATE words

@cindex IMMEDIATE words

Some words need to always -- or at least generally -- interpreted even
in compile mode. Such words are referred to as @emph{immediate}: their action
always happens at once regardless of mode.

@code{[} is an immediate word: if it wasn't, using it in a definition would
simply compile its behaviour into the word being compiled.

Any word can be made immediate.

@startwords
@word{IMMEDIATE, ( --- ),,}
@word{POSTPONE,( ``word''--- ),,}
@endwords

@code{IMMEDIATE} makes the last-compiled word immediate, and appears
@emph{after} its definition is complete. For example:

@example
: TEST 1 2 + ; IMMEDIATE
@end example

The word @code{TEST} will be marked as immediate.

@code{POSTPONE} is an immediate word that undoes any immediacy on the
@emph{next} word in the input. This mens that the entx word will be
compiled regardless of whether it is marked immediate or not. (This is
the default behaviour for non-immediate words, of course.)

A classic example is when defining a word that should compile the top
stack element when it is run. Such behaviour is the normal behaviour of
@code{LITERAL}, but @code{LITERAL} is immediate and so defining a word
using it would perform the action when the word was defined:

@example
: BAD-DEFINITION 1 + LITERAL ; IMMEDIATE
@end example

If the intention of this word is to add one to a value on the stack and
compile it, it will not work: instead, the word will, when compiled,
compile the top of the stack @emph{at compile time} into
@code{BAD_DEFINITION} and @emph{at run time} will add one to the top
value and then deposit the compiled literal on the stack.

To force @code{LITERAL} to be compiled into @code{BAD-DEFINITION}, we
postpone it:

@example
: GOOD-DEFINITION 1 + POSTPONE LITERAL ; IMMEDIATE
@end example

Executing @code{GOOD-DEFINITION} will then execute @code{LITERAL} as
required.




@node Accessing memory, Variables and constants, Compile and interpret modes, User guide
@section Accessing memory

Attila accesses memory in cell- or character-sized chunks.

@startwords
@word{@@,( addr---v ),``fetch'',}
@word{!,( v addr--- ),``store'',}
@word{C@@,( addr---c ),``see fetch'',}
@word{C!,( c addr---),``see store'',}
@endwords

@code{@@} fetches the cell at the given address onto the stack. @code{!} stores a
cell from the stack into memory starting at the given address. The
number of bytes moved depends on the compiler's cell size
(px@ref{Machine dependencies}).

@code{C@@} and @code{C!} are character-sized analogies of @code{!} and
@code{@@}. Attila currently assumes an 8-bit character set, at least in
the core language.

These words are most commonly used in association with variables
(@pxref{Variables and constants}) and for new defining words
(@pxref{Defining new defining words}).

@startwords
@word{CELLS,( n---bytes ),,}
@word{ALLOT,( bytes--- ),,}
@endwords

@code{CELLS} converts a number of cells into number of
bytes. @code{ALLOT} allocates a number of bytes of memory in the
dictionary, and is typically used when compiling words to allocate data
space (@pxref{Defining new defining words}). A common idiom is to see
code such as @code{CELLS ALLOT}, which takes a number of cells from the
stack, converts it to bytes, and allots that much memory: essentially we
allocate memory for a number of cells within the body of a word.


@node Variables and constants, Defining new defining words, Accessing memory, User guide
@section Variables, values and constants

@cindex Variable
@cindex Constant
@cindex Value


Variables, values and constants provide names for mutable and immutable
values. As usual, they are provided as words.

@startwords
@word{VARIABLE,compile:( ``name''--- ) runtime:( ---addr ),,}
@word{VALUE,compile:( n ``name'' -- ) runtime:( -- n ),,}
@word{CONSTANT,compile:( n ``name''--- ) runtime:( ---n ),,}
@endwords

Executing a variable returns the address of a cell, which may then be
manipulated directly as memory (@pxref{Accessing memory}):

@example
 ok VARIABLE SOMETHING
 ok 10 SOMETHING !
 ok SOMETHING .
12345 ok SOMETHING @@ .
10 ok
@end example

A variable's value is initially undefined.

Constants simply provide a name for a value, which cannot then be
changed. Executing a word defined by @code{CONSTANT} will place its
value on the stack.

Values are ``mutable constants'': a word defined by @code{VALUE} will,
when executed, place its value on the stack. However, the value can
be changed across the lifetime of the program using @code{TO}:

@startwords
@word{TO,( v ``name'' -- ),,}
@endwords

For example:

@example
 ok 31 VALUE AGE-IN-MY-DREAMS
 ok AGE-IN-MY-DREAMS .
31 ok 35 TO AGE-IN-MY-DREAMS
 ok AGE-IN-MY-DREAMS
35
@end example

Essentially a @code{VALUE} is more like a variable in other languages,
providing access to a changeable value. In fact you often find more
@code{VALUE}s than @code{VARIABLE}s in source code, as they're rather
easier to use in many cases (although not all).

@startwords
@word{USER,compile:( offset ``name''--- ) runtime: ( ---addr ),,}
@endwords

``User'' variables @footnote{@emph{User} is perhaps not the best word to
use, since user variables are actually maintained by the run-time
system. The name is sanctified by history, however.} provide access to
important system features and values. In general there is no need to
define new ones, although they can be defined if required. From a user
perspective, a user variable behaves exactly like an normal variable;
internally, the address is set as an offset within a special block of
memory. Since there is no protection for mapping one user variable over
another, care should be taken (@pxref{User variables}).


@node Defining new defining words, Return stack, Variables and constants, User guide
@section Defining new defining words

@cindex Defining words

The @code{CREATE} @dots{} @code{DOES>} construction is one of the most
useful extension mechanisms in threaded interpreters, and a problematic
one to implement efficiently.

The high-level operation is straightforward, if a little confusing at
first. A new word can be created in two ways: as a colon-definition
using @code{:} and as a stand-alone word using @code{CREATE}. Both words
create the necessary headers. @code{:} makes the code field of the new
word the inner interpreter, so that when executed it will interpret the
list of word execution tokens stored in its body.

A word created with @code{CREATE} by default has a code field of
@code{(DOVAR)} that returns the address of the body of the word. This
can be altered by using @code{DOES>}. @code{DOES>} causes the
last-defined word's code field to be changed to the inner interpreter,
but has the interpreter execute the code that appears after @code{DOES>}
itself.

@menu
* Motivating example::          
* Implementation::              
@end menu

@node Motivating example, Implementation, Defining new defining words, Defining new defining words
@subsection Motivating example

An example will make things clearer. Suppose we want to build a simple
array of @emph{n} cells. Each element of the array is accessed using an
index from 1 to @emph{n}, so code such as @code{2 MYARRAY @@} fetches
the value from the second cell of the @code{MYARRAY} array.

We could build @code{MYARRAY} by hand, but that'd be inelegant: it'd be
better to define a new defining-word that build arrays. The approach is
simple:

@itemize @bullet
@item
At compile-time, we allocate @emph{n} cells of memory for the array in
the body of the word
@item
At run-time, we increment the body by the index to return the address of
the indexed cell
@end itemize

@startwords
@word{CREATE,( ``name'' --- ),,}
@word{DOES>,( --- ),,}
@endwords

Using @code{CREATE} @dots{} @code{DOES>} we can specify @emph{both}
parts of this behaviour in the @emph{same} defining word. The part
between @code{CREATE} and @code{DOES>} executes at compile-time to build
the word; the part after @code{DOES>} executes at run-time @emph{when
the new word is executed}---it's the run-time behaviour of the
@emph{defined} word, @emph{not} the defining word. So:

@example
: ARRAY \ ( n -- )
    CREATE
        CELLS ALLOT
  DOES> \ ( i -- addr )
      SWAP 1 - CELLS + ;
@end example

The defining code (@code{CELLS ALLOT}) reads the number of cells from
the stack and allocates enough space in the body of the word
(@pxref{Accessing memory}). The behaviour code executes
with the address of the body of the word on the top of the stack, so
that the code can find its own body (since it'll generally want to
manipulate data stored there). In this case, the behaviour code
decrements the index to be 0-based, converts this to a byte count and
adds it to the body address to give the address of the cell being
requested. This can then be treated just like a cell variable and
assigned to---its value will initially be undefined.


@node Implementation,  , Motivating example, Defining new defining words
@subsection Implementation

What this implies is that we have to set the behaviour of a
newly-defined word to somewhere within the definition of the defining
word, @emph{and} make sure that the defining word doesn't execute this
code during its own execution (since it should only execute when the
@emph{defined} word is executed).

The way to do this is to have a special kind of colon-definition whose
definition isn't necessarily in the body of the word but is instead at
some other address @footnote{Gforth (and other Forths) allocate a cell
in the header of every word to hold this indirect body pointer, whether
or not it's ever used, trading memory for simplicity. Since we want to
address small devices this isn't an option for Attila.}.

We define a status flag for words that are potentially re-directed. A
re-directed word adds an extra word at the end of its header which can
be used to store the xt of the code its supposed to execute at
run-time. A special primitive @code{(DO)} is used as code field that
reads this field and calls the inner interpreter with it. @code{CREATE}
marks the words it creates as redirectable; @code{DOES>} fills-in the
indirect body address.

There are a couple of subtleties here. Firstly, the first cell of the
body is allocated automatically for redirectable words, and so shouldn't
be available for data. The @code{>BODY} word takes account of this and,
given an xt of a redirectable word, will return the address of the first
@emph{usable} body cell.

Secondly, the defining word mustn't execute the behavioural part of the
word. @code{DOES>} pops the instruction pointer off the return stack,
which contains the address of the next xt in the surrounding colon
definition (the defining word) to be used as the indirect body of the
defined word: this has the side effect of exiting the defining word when
@code{DOES>} itself exits, returning to the point after the defining
word was called.

Thirdly, the contents of the indirect body is a pointer @emph{not} an
xt. @code{(DOES)} messes with the TIL's instruction pointer. You can't
access the indirect body and then go from that to an xt, since there
essentially isn't one for the behavioural code. This is unlikely to be a
problem for the vast majority of applications, and is so obscure that we
probably shouldn't even have mentioned it, but now you know.

This implementation wastes a bit of memory by allocating an indirect
body field for every word created with @code{CREATE}, regardless of
whether it later has its behaviour altered. This is a compromise in the
interests of compatibility: a slightly more memory-efficient approach
would have been to have @code{CREATE} define ``ordinary'' words that
return their body address, and use another word (such as @code{BUILDS>})
for words that can be redirected. The issue with this would be that
Forth programmers (especially) are used to using @code{CREATE} @dots{}
@code{DOES>} as an idiom, and changing it is a recipe for confusion.


@node Return stack, Conditionals, Defining new defining words, User guide
@section Return stack

@cindex Return stack

The return stack is used to maintain the context of word
invocation. Usully this is only of interest to those porting Attila
(@pxref{Porting guide}) or writing new control constructs
(@pxref{Control structures}). However, with care it can also be used as
temporary storage for values, and can simplify the stack manipulations
in come cases while avoiding the need fo variables.

@startwords
@word{>R,( n--- ) (R: ---n ),``to-ar'',}
@word{R>,( ---n ) (R: n--- ),``from-ar'',}
@word{R@@,( ---n ) (R: n---n ),``ar-fetch'',}
@word{RDROP,( --- ) (R: n--- ),``ar-drop'',}
@word{RPICK,( i---ri ) (R: ri @dots{} r2 r1---ri @dots{} r2 r1 ),``ar-pick'',}
@endwords

@code{>R} takes the top words from the data stack and moves it to the return
stack. @code{R>} reverses this operation, while @code{R@@} fetches the top of the
return stack without changing it. @code{RDROP} drops the top element, which
@code{RPICK} allows access to elements farther down. Note that there are no
analogues of @code{SWAP} or @code{ROLL}, although these could be defined if needed
using the available operations.

@menu
* Caveats::                     
* Example::                     
@end menu

@node Caveats, Example, Return stack, Return stack
@subsection Caveats

Using the return stack as a temporary store is a fraught exercise unless
care is taken: mistakes will almost certainly crash the compiler. We
therefore need to use the return stack without upsetting the run-time
system (@pxref{The inner interpreter}). The following safety tips will
help:

@itemize @bullet
@item
Don't try to pass information between words using the return
stack. This won't work, as the inner interpreter will almost
certainly have information sitting on the top of the stack
@item
Always clean up the return stack before leaving a word. This typically
means that @code{>R} and @code{R>} of @code{RDROP} appear in balanced
pairs
@item
Don't use the return stack across the boundary of a counted loop
(@pxref{Counted loops}) such as @code{DO @dots{} LOOP}, as these
constructions use the return stack themselves for storing loop indices
@item
Don't try to be too clever. There are plenty of other places to
exercise programming finesse that don't run the risk of trashing
the whole system.
@end itemize


@node Example,  , Caveats, Return stack
@subsection Example

An example of where the return stack comes in handy can be found in
the formatting.fs module of the standard prelude, which defines words
for formatted numeric output. This module uses a scratch area for
building a string representation of a number, and one operation
provided is to move a complete string to the scratch area. The code to
do this is:

@example
\ Move a string into the scratch area
: >SCRATCH \ ( addr n -- )
    >R
    SCRATCH-POINTER @@ R@@ CMOVE
    R> SCRATCH-POINTER +! ;
@end example

The important parameter is the first one, @code{n}, the number of characters
in the string. We need this in two places:

@enumerate
@item
in the second line, as the count for moving the string into the
scratch area (@pxref{Strings and printing}), and
@item
in the third line, to increment the scratch area pointer past
the string.
@end enumerate

It's simplest to stash the count on the return stack. We can then use
@code{R@@} to access it for the count passed to @code{CMOVE}, and then
remove it with @code{R>} to increment the scratch pointer. Notice how
@code{>R} and @code{R>} appear as a matched pair so that the return
stack is unchanged across the word.

For reference, a possible implementation of @code{>SCRATCH}
@emph{without} using the return stack would be:

@example
: >SCRATCH \ ( addr n -- )
    DUP ROT
    SCRATCH-POINTER @@ SWAP CMOVE
    SCRATCH-POINTER +! ;
@end example

Admittedly the stack manipulations needed here aren't all that heroic,
but they're still awkward. The benefits from the extra capabilities
from using the return stack increase dramatically as words get more
complicated.



@node Conditionals, Logical operations, Return stack, User guide
@section Conditionals

@cindex Conditionals

Attila provides the standard @code{IF @dots{} ELSE @dots{} THEN} conditional
form. A condition takes the form of an @code{IF} to make the initial test, a
@code{THEN} to terminate the structure, and an optional @code{ELSE} in between. The
@code{IF} word tests the stack and, if the flag on top is true, executes the
code after it. If there is an @code{ELSE} and the flag is false, it executes
the code after @code{ELSE}. Whichever branch is executed terminates at the
@code{THEN}, where control resumes.

For example:

@example
: ATEST ( v -- )
   10 > IF
      ." Greater than 10"
   ELSE
      ." Not greater than 10"
   THEN NEWLINE ;
@end example

Executing @code{12 ATEST} will print ``Greater than 10'', while @code{2 ATEST} will
print ``Not greater than 10''.

@startwords
@word{IF,( f--- ),,}
@word{ELSE,( --- ),,}
@word{THEN,( --- ),,}
@endwords

The only real issue with these words is conceptual. Other languages
place the @code{IF} @emph{before} the code that does the test; Attila
places it @emph{after}. This makes sense given the stack-based nature of
the system, but it needs care initially.

Conditionals can be nested as you would expect:

@example
: ANOTHERTEST ( a -- )
   DUP 10 > IF
      20 < IF
         ." Between 11 and 19 inclusive"
      ELSE
         ." Greater than 19"
      THEN
   ELSE
      DROP ." Not greater than 10"
   THEN NEWLINE ;
@end example

The bracketing means there's no danger of a ``dangling else''.


@node Logical operations, Loops, Conditionals, User guide
@section Logical operations

Attila treats any non-zero number as true, and zero as false for the
purposes of comparison. Of course this confusion of types isn't
necessarily desirable.

@startwords
@word{TRUE,( ---tf ),,}
@word{FALSE,( ---ff ),,}
@endwords

These literals can make explicit logical values more readable.

@startwords
@word{AND,( f1 f2---f1^f2 ),,}
@word{OR,( f1 f2---f1vf2 ),,}
@word{NOT,( f---!f ),,}
@endwords

@code{AND} and @code{OR} are actually the same as the bitwise operations
(@pxref{Arithmetic}), and work fine for logical values too. However,
it's important not to take this too far: @code{NOT} is a logical
negation and is @emph{not} the same as the bitwise @code{INVERT}.

@startwords
@word{0=,( n---f ),``zero equals'',}
@word{=,( a b---f ),``equals'',}
@word{<>,( a b---f ),``not equals'',}
@word{<,( a b---f ),``less than'',}
@word{<=,( a b---f ),``less than or equal'',}
@word{>,( a b---f ),``greater than'',}
@word{>=,( a b---f ),``greater than or equal'',}
@endwords

The usual logical tests are available, plus others for specific types.


@node Loops, Counted loops, Logical operations, User guide
@section Loops

@cindex Loops

Loops are intended to be bounded within a single word, and should not
cross a word boundary. This is because of the way the control stack
works (@pxref{The control structures stack}): breaking a loop will not
work and will probably crash the virtual machine horribly.

@menu
* Unbounded loops::             
* Bounded loops::               
@end menu

@node Unbounded loops, Bounded loops, Loops, Loops
@subsection Unbounded loops

@startwords
@word{BEGIN,(C:---cs ),,}
@word{AGAIN,(C: cs--- ),,}
@endwords

A loop of the form @code{BEGIN} @dots{} @code{AGAIN} will repeat the
body code indefinitely. You can escape from the body using an early exit
(@pxref{Exiting loops,}).


@node Bounded loops,  , Unbounded loops, Loops
@subsection Bounded loops

There are two kinds of bounded loop, tested top and bottom.

@startwords
@word{WHILE,( f--- ),,}
@word{REPEAT,(C: cs--- ),,}
@endwords

A loop @code{BEGIN} @dots{}( f ) @code{WHILE} @dots{} @code{REPEAT}
first performs the code in the first part (the test). @code{WHILE} tests
the top of the stack and, if false, exits the loop after @code{REPEAT};
if true, it executes the code in the second part (the body) until the
@code{REPEAT}, and then jumps back to perform the test again.

@startwords
@word{UNTIL,( f--- ) (C: cs--- ),,}
@endwords

A loop @code{BEGIN} @dots{} ( f ) @code{UNTIL} executes the body and
repeats as long as the top of the stack is true.

You can escape from the bodies or tests of these loops using an
early exit (@pxref{Exiting loops}).



@node Counted loops, Exiting loops, Loops, User guide
@section Counted loops

@startwords
@word{DO,( limit initial--- ) (C: ---cs ),,} 
@word{LOOP,( --- ) (C: cs--- ),,}
@word{+LOOP,( n--- ) (C: cs--- ),``plus loop'',}
@endwords

A loop of the form ( lim int ) @code{DO} @dots{} @code{LOOP} or ( lim
int ) @code{DO} @dots{} ( n ) @code{+LOOP} begins a counter at int and
repeats the body until that counter is equal to or greater than lim. The
counter is incremented at the bottom of loop, by 1 (for @code{LOOP}) or
the top stack item (for @code{+LOOP}).

@startwords
@word{I,( ---i ),,}
@word{J,( ---j ),,}
@word{K,( ---k ),,}
@endwords

Within the body of a @code{DO} loop, @code{I} refers to the current
value of the counter. If the loop is nested within a second @code{DO}
loop, then within the body of the contained loop @code{J} refers to the
index of this surrounding loop, and similarly for @code{K}.

As an example:

@example
: TEST
    5 0 DO
       I . CR
       5 0 DO
         J . I . CR
       LOOP
    LOOP ;
@end example

The first use of @code{I} refers to the index of the outermost @code{DO}
loop. The second instance of @code{I} refers to the index of the
innermost @code{DO} loop, whilst the instance of @code{J} refers to the
index of the outermost loop as well.

Using @code{I}, @code{J} and @code{K} outside counted loops or with the
wrong depth will return an undefined value.

You can escape from the bodies of counted loops using an eaxrly exit
(@pxref{Exiting loops}).


@node Exiting loops, General stacks, Counted loops, User guide
@section Exiting loops

It is sometimes useful to escape from loops or entire words.

@startwords
@word{LEAVE,( --- ),,}
@word{EXIT,( --- ),,}
@endwords

Within the body or test of a loop, @code{LEAVE} immediately jumps to the
code following the end of the loop, while @code{EXIT} jumps out of the
entire word. Both words unwind the loop control structures, and can be
used in arbitrarily nested loops.

You can't use @code{LEAVE} to escape from a conditional
(@pxref{Conditionals}), which are not treated as control structures for
this purpose. You can @code{EXIT} from a conditional, though:
@code{EXIT} works anywhere in any word.


@node General stacks, Strings and printing, Exiting loops, User guide
@section General stacks

@cindex General stacks

Attila, as with almost all TILs, is stack-based. The two main stacks,
the data stack used for passing values to and from words, and the
return stack, used to control the nesting and scheduling of words,
behave as expected.

However, stacks are generally useful in languages and it can often be
good to create and maintain a stack separately from the ``normal''
stacks. A good example is the control structures stack
(@pxref{The control structures stack}).

@menu
* General stack notation::      
* Stack creation::              
* Stack usage::                 
@end menu

@node General stack notation, Stack creation, General stacks, General stacks
@subsection General stack notation

Given a stack ST, we will denote stack pictures on its using the
notation (ST: a---b ) and so forth. Each different stack will have
its own identifier.


@node Stack creation, Stack usage, General stack notation, General stacks
@subsection Stack creation

@startwords
@word{STACK,( cells ``name''--- ),,}
@word{ST>MAXN,( st---maxn ),``ess-tee max-enn'',}
@endwords

@code{STACK} creates a new stack capable or holding up to the given
number of cells, initially empty. When executed, the created word places
a ``stack token'' on the data stack that is used for all other stack
operations. @code{ST>MAXN} will return the maximum depth of a stack,
given its stack token.

@code{STACK} is a defining word that produces a word representing the
stack. Executing the defined word will place the stack's identifier in
the data stack.


@node Stack usage,  , Stack creation, General stacks
@subsection Stack usage

@startwords
@word{>ST,( v st--- ) (ST: ---v ),``to ess-tee'',}
@word{ST>,( st---v ) (ST: v--- ),``from ess-tee'',}
@word{ST@@,( st---v ) (ST:--- ),``ess-tee fetch'',}
@word{#ST,( st---n ) (ST: --- ),``hash ess-tee'',}
@word{ST-PICK,( st i---vi ) (ST: --- ),``ess-tee pick'',}
@word{ST-NDROP,( st i ) (ST: vi @dots{} v1--- ),``ess-tee en-drop'',}
@endwords

The user-level word set can push, pop and peek elements from a stack,
query it for its current depth, pick deep elements and drop several
elements at once. This is somewhat less than is available for the data
stack, but enough for many applications and enough to define the other
stack operations if required.



@node Strings and printing, Number input, General stacks, User guide
@section Strings and printing

Attila has only limited string handling, as befits a language
targeting (at least in part) embedded devices. However, there are
general issues with string handling in TILs: because strings are of
variable length they are hard to manipulate without dynamic memory
allocation, which is an operation sufficiently expensive as to be
(preferably) optional.

Attila addresses this problem by allocating string buffers and
scratch areas, whic can be re-used as required when reading and
formatting strings. This isn't a great solution, but is workable for
systems with fairly low demands in terms of string I/O.

@menu
* Characters::                  
* Strings::                     
@end menu


@node Characters, Strings, Strings and printing, Strings and printing
@subsection Characters

Characters are simply 8-bit numbers.

@startwords
@word{CHAR,( ``word''---c ),,} 
@word{[CHAR],compile:( ``word''--- ) runtime:( ---c ),``bracket-char'',}
@endwords

@code{CHAR} reads a word from the input and places the ASCII code of the
first character onto the stack. @code{[CHAR]} performs the same
operation in immediate mode, and compiles the character as a literal:
for example,

@example
: AN-E
   [CHAR] D 1+ ;
@end example

When we execute @code{AN-E}, the phrase @code{[CHAR] D} will place the
ASCII code for ``D'' onto the stack. This is then incremented to the
ASCII code for ``E''.

@startwords
@word{BL,( ---c ),``bee-ell'',}
@word{NL,( ---c ),``en-ell'',}
@endwords

The character constants for blanks (spaces) and new lines (carriage
returns).


@node Strings,  , Characters, Strings and printing
@subsection Strings

Attila follows the usual convention of representing strings as a pair
of numbers, an address and a character count @ref{Data types, #Data types}. String
operations typically leave this pair on the stack.

@startwords
@word{S",compile:( ``words''--- ) runtime:( ---addr len ),``ess-quote'',}
@word{(SLITERAL),( ---addr len ),``bracket-ess-literal'',}
@endwords

The phrase @code{S" Hello world"} compiles the string ``Hello world''
into the current word as a literal. When executed, the code will place
the address and count of the string onto the stack. The characters
should @emph{not} be manipulated, as the string is encoded into the
dictionary and may not be mutable.

@code{(SLITERAL)} is the string literal run-time handler, the analogue of
@code{(LITERAL)} for strings.

@startwords
@word{TYPE,( addr len--- ),,} 
@word{SPACE,( --- ),,}
@word{SPACES,( n--- ),,}
@word{CR,( --- ),``see-ar'',}
@endwords

@code{TYPE} displays a string on the output device, typically the
terminal. @code{SPACE} displays a single space, while @code{SPACES} displays
several. @code{CR} displays a newline.

@startwords
@word{CMOVE,( addr1 addr2 n--- ),``see-move'',}
@endwords

@code{CMOVE} moves character data around in memory, moving n bytes from addr1
to addr2. There should be enough memory at addr2 to accommodate the
string. The blocks of memory (addr1 @dots{} addr1+n) and (addr2
@dots{} addr2+n) may overlap, and @code{CMOVE} will ensure that the characters
are moved correctly.

@startwords
@word{S=,( addr1 len1 addr 2 len2---f ),``ess-equal'',}
@word{REVERSE,( addr len--- ),,} 
@endwords

Two strings are equal if they have the same length and the same
characters.

@code{REVERSE} reverses the characters in a string in-place.



@node Number input, Number output, Strings and printing, User guide
@section Number input

@startwords
@word{BASE,( ---addr ),,}
@word{NUMBER?,( addr len---n t | f ),,} 
@endwords

@code{NUMBER?} is the number parser. It takes a string and parses is as
a number in the current number base, as stored in the user variable
@code{BASE}. If the string represents a legal number, the number is
placed on the stack below true flag; otherwise a false flag is pushed.

@startwords
@word{DECIMAL,( --- ),,}
@word{HEX,( --- ),,}
@word{BINARY,( --- ),,}
@endwords

These words set the current number base, which applies for both input
and output. They are shortcuts for assigning to @code{BASE}:

@example
: DECIMAL
   10 BASE ! ;
@end example

Any number base between 1 and 36 may be selected, although (with the
possible exception of octal) it's hard to see why bases other than 10,
16 and 2 would be useful very often@dots{}


@node Number output, Vocabularies, Number input, User guide
@section Number output

@cindex Numeric output
@cindex Formatted output

Number output is performed using a number formatting system that
places digits into a scratch area. The placement and punctuation of
digits may be precisely controlled as required.

@startwords
@word{<#,( --- ),``start-number'',}
@word{>DIGIT,( d---c ),``to digit'',}
@word{#,( n---q ),``digit'',}
@word{#S,( n---0 ),``digits'',}
@word{HOLD,( c--- ),,} 
@word{SIGN,( n--- ),,} 
@word{#>,( n---addr len ),``end-number'',}
@endwords

Formatted output generally occurs by treating @code{<#} and @code{#>} as
brackets: the former sets up the scratch area, while the latter converts
the formatted number into a string suitable for @code{TYPE}.

@code{#} takes a number, divides it by the current number base, leaves
the quotient on the stack, converts the remainder into a digit in the
current number base using @code{>DIGIT} and appends it to the scratch
area. Doing this repeatedly until the quotient is zero will output all
the digits---in reverse order, of course, since the least-significant
digit is generated first. @code{#S} repeatedly applies @code{#} until
the quotient hits zero. @code{SIGN} appends a minus sign if the number
is negative. @code{HOLD} appends the given character.

Since the number is built in reverse, @code{#>} calls @code{REVERSE} to
put the string into the ``correct'' output order. The resulting string
is only valid until the next use of the scratch area, so if it is not
being printed immediately it should be moved somewhere safer using
@code{CMOVE}.

@startwords
@word{.,( n--- ),``print'',}
@word{.DEC,( n--- ),``print decimal'',}
@word{.HEX,( n--- ),``print hex'',}
@word{.BIN,( n--- ),``print binary'',}
@endwords

The default printing routine @code{.} prints the number on the top of the stack
in the current number base. The other three words print the number in
the given number base without affecting the number base currently
selected, and so can be used to force a particular print format
without affecting the rest of the system.


@node Vocabularies, File access, Number output, User guide
@section Vocabularies

@cindex Vocabulary
@cindex Word list

Attila's main language structure is the dictionary containing all the
defined words. A single word list like this is perhaps a little
unwieldy, and it is often useful to subdivide the dictionary
somewhat. This has a number of advantages:

@itemize @bullet
@item
collections of words can be grouped together
@item
words can be removed from the word list, or added, as required, so
definitions that are ``inappropriate'' are masked
@item
the search order for locating words can be changed, so that one
definition can mask another
@item
vocabularies provide improved memory management by separating
conceptually different collections of words
@end itemize

Vocabularies -- also known as word lists -- provide this
functionality. Vocabularies segment the set of available words and
allow different word lists to be selected, deselected and reordered as
required.

@menu
* The root vocabulary::         
* The search order::            
* The current vocabulary::      
@end menu

@node The root vocabulary, The search order, Vocabularies, Vocabularies
@subsection The root vocabulary

Basic vocabulary support is provided within the virtual machine
(@pxref{Memory}), but an understanding of these low-level mechanisms is
only necessary for very advanced uses of the vocabulary system such as
cross-cmpilation. 

In general, vocabularies are provided as an optional feature. When the
vocabulary sub-system is loaded, it defines a root vocabulary containing
all the words defined up to that point. This will typically include the
core of the system and the words needed to implement the vocabulary
functions. This root vocabulary always resides at the bottom of the
vocabulary search order, so it is impossible to ``lose'' either the
basic core of the system or the words that define the vocabulary
features.


@node The search order, The current vocabulary, The root vocabulary, Vocabularies
@subsection The search order

@cindex Search order

The vocabulary search order defines the way in which vocabularies are
searched.  The search order is a stack, which we denote (V:---) in
stack pictures. The top-mist (i.e. rightmost) vocabulary is searched
first, followed by the next and so on, ending with the @code{ROOT} vocabulary
which is always at the base of the search order.

@startwords
@word{VOCABULARY,( ``name''--- ),,}
@word{ROOT,( --- ) (V: ---rootvoc ),,} 
@word{ONLY,( --- ) (V: ---rootvoc ),,}
@word{ALSO,( --- ) (V: voc---voc voc ),,}
@endwords

A phrase such as @code{VOCABULARY MYVOC} creates a new vocabulary @code{MYVOC} that
can receive new words. @emph{It does nothing else}: the vocabulary isn't
selected or placed in the search order. When executed, @code{MYVOC} will
place itself onto the top of the search order, replacing the
vocabulary that is there already. This is different to the behaviour
of most stacks: if the search order is (for example) @code{ROOT A B}
(top-most vocabulary to the right), executing @code{MYVOC} will replace @code{B} and
leave @code{ROOT A MYVOC}. The only exception to this rule is that @code{ROOT} will
always be on the bottom or the order and can't be replaced.

@code{ONLY} empties the search order except for the root vocabulary
@code{ROOT} (@pxref{The root vocabulary}). @code{ALSO} duplicates the
vocabulary on the top of the order. Since executing a vocabulary word
replaces the top item, the phrase @code{ALSO MYVOC} will duplicate
whichever vocabulary is on the top of the search order and then replace
the duplicate with @code{MYVOC}. A typical idiom is to see something
like @code{ONLY ALSO A ALSO B}, which resets the search order to consist
of exactly the vocabularies @code{ROOT}, @code{A} and @code{B},
eliminating any other extraneous words.


@node The current vocabulary,  , The search order, Vocabularies
@subsection The current vocabulary

@cindex Current vocabulary
@cindex Definitions

@startwords
@word{CURRENT,( ---addr ),,} 
@word{DEFINITIONS,(V: voc--- ),,}
@endwords

The current vocabulary is the vocabulary that receives new definitions:
defining a new word with @code{:} or any other defining word will place
an entry into this current vocabulary. Typically the current vocabulary
is at the top of the search order, so the words being defined have
access to other words being defined at the same time. It is possible,
however, to have a current vocabulary that is not in the search order at
all, so new definitions remain ``invisible''.

The @code{DEFINITIONS} word removes the top entry in the vocabulary
search order and makes it current. Another common idiom is to see
something like @code{ONLY ALSO A ALSO B ALSO DEFINITIONS}, which makes
@code{ROOT}, @code{A} and @code{B} the search order and then also uses
@code{B} for new definitions.



@node File access, , Vocabularies, User guide
@section File access

@cindex Files

Attila only has fairly basic file I/O: enough to extend the system
from source code, essentially.

@startwords
@word{FILE-OPEN,( addr len---fh ),``file open'',}
@word{FILE-CLOSE,( fh---),``file close'',}
@endwords

@menu
* Including source code::       
* Input sources::               
* Language preludes::           
@end menu


@node Including source code, Input sources, , File access
@subsection Including source code

@startwords
@word{FILE-OPEN-INCLUDE,( addr len -- fh | 0 ),''file open include'',}
@word{(OPEN-FILE),( addr len opener -- fh | 0 ),''bracket open file'',}
@word{(LOAD),( fh -- ),,}
@word{LOAD,( addr len -- ),,}
@word{INCLUDE,( addr len -- ),,}
@word{#INCLUDE,( ``file'' -- ),''hash include'',}
@endwords


@node Input sources, Language preludes, Including source code, File access
@subsection Input sources



@node Language preludes,  , Input sources, File access
@subsection Language preludes

@cindex Prelude
@cindex Language
@cindex Language prelude

A compiler is generally for a fixed language in which you write your
code. Threaded interpreters are a little different, however, as the
words you define yourself are to all intents and purposes
indistinguishable from the language itself: you extend the language with
new words@footnote{The proof of this is that the compiler itself is
written using the same language you use.} This raises the question of
where the boundary is for the language -- or, to put it another way,
where does the language end and the program begin?

Attila doesn't try to provide a canonical answer to this question:
instead it provides as much of the language as possoble as source code,
and lets you load what features you need. Some features need others, so
there's a dependency order between features.

This selection of features is the task of the @emph{language prelude} (or
simply @emph{prelude}). This is simply a piece of Attila code that's loaded
first, before the programmer gets control. The prelude loads some other
source files that provide features to be made available.

The standard prelude is held in @file{$DATADIR/prelude.fs} , and is
loaded by default when Attila is run. This can be changed: you can
define your own prelude, or use another one that comes with the
distribution. You can run with just the core system is that's
sufficient, which it may be for some applications.

For details of the command-line arguments needed to change the prelude,
see @ref{Starting the system}.


@node Internals guide, Porting guide, User guide, Top
@chapter Internals guide

@menu
* Memory::                      
* The layout of words::         
* Bodies::                      
* The inner interpreter::       
* Control structures::          
* The control structures stack::  
* Booting::                     
@end menu

@node Memory, The layout of words, , Internals guide
@section Memory

Most threaded interpreters provide a very simple memory model, as befits
their heritage (and frequent target even now) of use on small-memory
embedded devices. Memory is typically treated as being ``flat'', with
the code and data occupying a single block of memory. Although simple,
this structure is undesirable for a number of reasons:

@itemize @bullet
@item
it is too explicit, and encourages nasty hacks based on a knowledge of
the physical memory layout that are then non-portable
@item
it mixes (and confuses) code with data in a way that is not even
necessary with a threaded interpreter
@item
it precludes experimentation with other memory models for fear of
breaking too much existing code
@end itemize

For all these reasons, Attila uses a slightly more complex memory model.

Memory is managed in units of vocabularies. Vocabularies also exist at
the level of the language (@pxref{Vocabularies}); at the virtual machine
level vocabulary handling is much simpler than this, however.

A vocabulary -- for the virtual machine -- is a unit of memory
management consisting of three ``segments'':

@enumerate
@item
a @emph{namespace} used to hold the naming information about words
@item
a @emph{codespace} used to hold the compiled code for a word, including
more header information needed to execute it
@item
a @emph{dataspace} used to hold data
@end enumerate

Each of these three segments is distinct, and can have a different
size. A vocabulary exposes pointers to the top of each space
(@code{HEAD}, @code{TOP} and @code{HERE} respectively), and maintains
pointers to the last header and word defined (@code{LASTHA} and
@code{LASTXT}).

The virtual machine understands a single vocabulary, held in the user
variable @code{(CURRENT-VOCABULARY)}. This vocabulary is searched by the
default implementation of @code{FIND} to locate words. Although new
vocabularies can be created using @code{(NEW-VOCABULARY)}, almost all
interactions with vocabularies are best handled using the vocabulary
word set (@pxref{Vocabularies}).


@node The layout of words, Bodies, Memory, Internals guide
@section The layout of words

Each word is laid-out in memory in the same way. A word consists of a
header, a code segment and (possibly) some data, each of which resides
in a distinct are of memory (@pxref{Memory}).

(@emph{Please note} that this section is for your information only:
programs should @emph{not} rely on this memory structure.)

The header consists of:

@multitable @columnfractions 0.25 0.25 0.5
@item Name @tab Size @tab Description
@item @code{namelen} @tab 1 byte @tab length of word name
@item @code{name} @tab n bytes @tab the name
@item @code{ch} @tab 1 cell @tab pointer to the code header
@item @code{lf} @tab 1 cell @tab link field to header of previous word
@end multitable

The code header consists of:

@multitable @columnfractions 0.25 0.25 0.5
@item Name @tab Size @tab Description
@item @code{status} @tab 1 byte @tab status flags
@item @code{cf} @tab 1 cell @tab code field
@item @code{bf} @tab 1 cells @tab pointer to the word body
@end multitable

Given an execution token for a word, the words @code{>STATUS},
@code{>CFA} and @code{>BODY} return the status byte, code field address
and body address respectively @footnote{There is no way to convert an
execution token into the name of the corresponding word.}. These words
are the @emph{only portable way} of accessing the definitions of words.

In a colon-definition, the body consists of cells containing the
execution tokens of the words making up the word's definition plus other
read-only compiled information such as literal strings and numbers.

The basic behaviour of the word is given by the code pointed to by its
code field. A colon-definition points to the primitive @code{(DOCOLON)} (the
inner interpreter). A primitive word's code field points to the code
of the primitive encapsulated by the word.

@node Bodies, The inner interpreter, The layout of words, Internals guide
@section Bodies, code fields and execution tokens

@dots{}

@node The inner interpreter, Control structures, Bodies, Internals guide
@section The inner interpreter

@dots{}

Most TILs use an inner interpreter (or ``engine'' in Gforth terminology)
written in machine code for best speed and making use of jumps and
other unstructured techniques. Since Attila is written in C, such
techniques don't work well and the inner interpreter is factored
slightly differently.

Attila's inner interpreter is factored as two words, @code{(DOCOLON)} and
@code{EXECUTE}. Both deal with both primitives and ``normal'' words, and to
understand how they work we first need to understand the structure of
a Attila word.

@menu
* Words::                       
* Execution::                   
* The return stack::            
@end menu

@node Words, Execution, The inner interpreter, The inner interpreter
@subsection Words

All code in Attila is provided by words. A word is what it sounds
like: a named piece of code which, when typed at the keyboard,
executes its definition. There are words providing arithmetic, logical
operations, control structures, the definition of new words, and so
forth. Programming Attila involves writing new words in terms of
existing words.

Attila supports two kinds of words. @emph{Primitive} words are encoded
in C as part of the Attila virtual machine, and are used to provide the
basic level of functionality. @emph{Normal} words or
@emph{colon-definitions} are sequences of other words. If we define a
colon-definition @code{T}, we create a list of words which will be
executed when we execute @code{T}: in a sense @code{T} is simply a
pseudonym for the list of words used to define it. The definition is
held in the body of the word (@pxref{The layout of words}).


@node Execution, The return stack, Words, The inner interpreter
@subsection Execution

When a colon-definition is entered at the keyboard, the inner
interpreter locates the definition and begins executing it by
evaluating the first word. If this is a colon-definition, then @emph{it's}
definition will be loaded and executed in the same way. When this
second word completes, the next word of the first definition will be
executed. Control thus ``threads'' through the definitions of
colon-definitions, which explains the use of ``threaded interpretive
language'' to describe this kind of programming.

So how does anything actually happen, if we're simply executing nested
lists of words? Eventually the thread will hit a word which is a
primitive rather than a colon-definition, and since this is written in
C it can be executed directly. In a sense the colon-definitions just
collect together and sequence the execution of primitives.


@node The return stack,  , Execution, The inner interpreter
@subsection The return stack




@node Control structures, The control structures stack, The inner interpreter, Internals guide
@section Control structures

Control structures in threaded interpreters involve jumping between
the execution tokens of words, changing the instruction pointer of the
virtual machine. Attila splits this process into three parts: the
primitives needed to control the instruction pointer, the control
structure words used by programmers, and the internal words needed to
implement the structures.

@menu
* Branching primitives::        
* Constructing control structures::  
* Internal control structure management::  
@end menu

@node Branching primitives, Constructing control structures, Control structures, Control structures
@subsection Branching primitives


@node Constructing control structures, Internal control structure management, Branching primitives, Control structures
@subsection Constructing control structures


@node Internal control structure management,  , Constructing control structures, Control structures
@subsection Internal control structure management



@node The control structures stack, Booting, Control structures, Internals guide
@section The control structures stack

@cindex Control structures stack

Implementing control structures involves managing jumps. This is
straightforward for purely structured situations, involving a single
entry point and a single exit point. However, there are some algorithms
that can only be coded efficiently with early escapes. In addition,
returning from arbitrary points in a word, handling exceptions and the
like all require a slightly more sophisticated way of handling
loops. The control structures stack provides this.

@menu
* Basic ideas::                 
* Control stack notation::      
* The structure of the stack::  
* Resolving jumps::             
* Handling escapes::            
@end menu

@node Basic ideas, Control stack notation, The control structures stack, The control structures stack
@subsection Basic ideas


@node Control stack notation, The structure of the stack, Basic ideas, The control structures stack
@subsection Control stack notation

Where the structure of the CS stack is important, we denote it in
stack pictures using the stack notation (C: @dots{}---@dots{} ) as with other
stacks. We refer to a single control structure as a single unit, even
though it will consist of several elements: this prevents applications
accessing the control structure record other than through the access
words.


@node The structure of the stack, Resolving jumps, Control stack notation, The control structures stack
@subsection The structure of the stack

@startwords
@word{CS,( ---st ),``see-ess'',}
@word{/CS,( ---n ),``per see-ess'',}
@endwords

The control stack is a general stack (@pxref{General stacks}) of
records@footnote{Forth systems typically store the control stack on the
data stack. Attila separates them, for no immediately obvious reason.},
one per nested control structure. Each consists of @code{/CS} stack
elements.

@startwords
@word{(CS-START),( rt--- ) (C:---cs ),``see-ess start'',}
@word{(CS-END),( --- ) (C: cs--- ),``see-ess end'',}
@endwords

Attila control structures are composed of @code{IMMEDIATE} words. Within
these words, each control structure is bounded by uses of
@code{(CS-START)} and @code{(CS-END)} to start and end the
structure. @code{(CS-START)} takes as argument the number of elements
that the control structure will store on the return stack at run-time
(often 0). @code{(CS-START)} sets up the control stack record for the
structure, which is then cleaned-up by the corresponding
@code{(CS-END)}.

@startwords
@word{(CS-BASE-ADDR),( ---addr ),``see-ess addr'',}
@word{(CS-BASE-ADDR!),( addr--- ),``see-ess addr store'',}
@word{(CS-R),( ---n ),``see-ess-ar'',}
@word{(CS-R!),( n--- ),``see-ess-ar store'',}
@endwords

The control structure record stores several pieces of information,
accessible @emph{via} a small set of words. @code{(CS-R)} returns the
number of elements the control structure will place on the stack at
run-time. Typically this is the number passed to @code{(CS-START)}, but
it may be changed over the lifetime of the control structure by calling
@code{(CS-R!)}. @code{(CS-BASE-ADDR)} returns the start address of the
control structure. By default this is the value of @code{HERE} when
@code{(CS-START)} is used, but it may be change using
@code{(CS-BASE-ADDR!)}.

@startwords
@word{CS-PICK,( i---) (C: @dots{} csi @dots{} cs1---@dots{} csi @dots{} cs1 csi),``see-ess pick'',}
@word{CS-DROP,( --- ) (C: cs--- ),``see-ess drop'',}
@endwords

Within a control structure, @code{CS-PICK} selects the i'th nested
control structure (with 1 being the current, shallowest one) and
duplicates its record on the top of the control stack. Control stack
words will then operate on this record. @code{CS-DROP} drops the topmost
(shallowest) control structure record. Ths allows new control structures
to maniplate the control structure stack portably.


@node Resolving jumps, Handling escapes, The structure of the stack, The control structures stack
@subsection Resolving jumps

@startwords
@word{>BEGIN,( --- ),``to begin'',}
@word{>END,( --- ),``to end'',}
@endwords


@node Handling escapes,  , Resolving jumps, The control structures stack
@subsection Handling escapes


@node Booting, , The control structures stack, Internals guide
@section Booting

@cindex Booting
@cindex Boot sequence

When Attila boots it follows the following structure:

@menu
* Parsing arguments::           
* Initialising memory::         
* Compiling primitives::        
* Compiling the initial dictionary::  
* Setting the executive::       
* Initialising the start-up code::  
* Warm-starting::               
@end menu

@node Parsing arguments, Initialising memory, , Booting
@subsection Parsing arguments

The command-line arguments are read and acted upon. Most affect the
booting of the system, either in terms of files loaded (the most common
case) or the available memory or memory model being used.

For details of the arguments available, see @ref{Starting the system}.

@node Initialising memory, Compiling primitives, Parsing arguments, Booting
@subsection Initialising memory, stacks, buffers and dictionary

Attila adopts a model in which the memory available to the VM is
fixed ahead of time. This model matches the traditional target for TIL
systems, which tend to be embedded or without traditional virtual
memory and which tend to monopolise the processor.

Once the block of user memory has been grabbed, it is allocated. The
data and return stacks are allocated at the top of the memory. The
stacks grow @emph{up}: this contrasts with more traditonal TILs in which
stacks grow @emph{down} from high memory. The current model was chosen for no
particular reason.

A further block of memory is allocated at high memory for the Terminal
Input Buffer (TIB), used to read user or file input.

The dictionary is then intiialised at low memory. The dictionary can
use all memory between the bottom of the memory and the bottom of the
TIB.


@node Compiling primitives, Compiling the initial dictionary, Initialising memory, Booting
@subsection Compiling primitives

Attila provides primitives as C code, which is compiled into the
system binary. To make these available to TIL code, each primitive is
wrapped-up in a TIL word.

The primitives are selected on the basis of providing the low-level
functions that must use C, including the inner interpreter and some
other control structures. Since primitives cannot be changed at
run-time, this suggests minimising the population of primitives as far
as possible to retain flexibility.

See @ref{Primitives} for details on how to write new primitives, and how
the primitive wrapping is performed.


@node Compiling the initial dictionary, Setting the executive, Compiling primitives, Booting
@subsection Compiling the initial dictionary

Once the primitives have been encapsulated into the dictionary,
Attila runs another piece of C code which compiles a small number of
words that are defined in TIL, i.e. are not primitives. This includes
the words that provide the machinery for colon-definition.

To understand why this is necessary, consider that the TIL VM has no
in-built compiler for TIL code: that is to say, compilation is not
primitive (provided by C code). However, we cannot use ``ordinary'' TIL
code as the compiler is not yet functioning and so we cannot actually
compile TIL code at all. The initial dictionary provides this
bridge between C and TIL by hand-compiling the TIL words.

Refer to @ref{Words} for more details on the TIL compiler.


@node Setting the executive, Initialising the start-up code, Compiling the initial dictionary, Booting
@subsection Setting the executive

@cindex Executive

The executive is the outermost word that the system runs, and is
typically intended to run forever. By default it is the word @code{OUTER},
which runs the terminal command loop.

The executive is actally stored in a user variable, which a program
can change if required (@pxref{Changing the executive}).

@menu
* Changing the executive::      
@end menu


@node Changing the executive,  ,  , Setting the executive
@subsubsection Changing the executive

Suppose you want (for some reason) to change the executive that
Attila is running, for example to modify the command loop.

The execution token of the executive is stored in user variable 1. You
can update this with the xt of the word you want to use. If you then
call @code{WARM} to cold-start the system, it will resume using the new
executive.

For example:

@example
: NEW-EXECUTIVE    \ a not very helpful executive
    BEGIN
        PARSE-WORD TYPE
        S" ?? " TYPE
    AGAIN ;

' NEW-EXECUTIVE 1 USERVAR !
COLD
@end example

You could just call @code{NEW-EXECUTIVE} directly, or course, but this
way has three side-effects. Firstly, you aren't embedded inside any
other words and the stack has been reset (by @code{WARM}). Secondly, any
run-time errors flagged by @code{ERROR} will re-start the system using
this new executive. This means, of course, that there's probably no way
out of a buggy executive. Thirdly, the new executive will also be used
by @code{#INCLUDE} to include source files.



@node Initialising the start-up code, Warm-starting, Setting the executive, Booting
@subsection Initialising the start-up code

The start-up code is the fragment of Attila source code that is run
first, when the system starts, after the first warm-start
(@pxref{Warm-starting}). It is then never run again.

The default start-up code includes the system prelude (@pxref{Language
preludes}) and then include any files mentioned on the command line
(@pxref{Parsing arguments}).


@node Warm-starting, , Initialising the start-up code, Booting
@subsection Warm-starting

The final bootstrapping step is for the VM to call @code{WARM} to start the
system. This performs four steps:

@enumerate
@item
Set the system number base (@pxref{Number input}) to 10 (decimal)
@item
Set the system mode (@pxref{Compile and interpret modes}) to interpret
@item
Set the input source to the terminal
@item
Jump to the executive
@end enumerate

@dots{}and that's it!



@node Porting guide, Word index, Internals guide, Top
@chapter Porting guide

@menu
* User variables::              
* Primitives::                  
@end menu


@node User variables, Primitives, , Porting guide
@section User variables

Attila provides the following user variables:

@multitable @columnfractions 0.5 0.5
@item Name @tab Description
@item @code{EXECUTIVE} @tab xt of the outer executive word
@item @code{STATE} @tab interpretation/compilation state
@item @code{BASE} @tab number base
@item @code{INPUT-SOURCE} @tab opaque pointer to the current interpreter
input source
@item @code{(CURRENT-VOCABULARY)} @tab current low-level vocabulary
@end multitable


@node Primitives, , User variables, Porting guide
@section Primitives



@node Word index, Concept index, Porting guide, Top
@chapter Word index

@printindex fn


@node Concept index, Appendix References and further information, Word index, Top
@chapter Concept index

@printindex cp


@node Appendix References and further information, Appendix The GNU General Public License, Concept index, Top
@chapter Appendix References and further information


@node Appendix The GNU General Public License, Appendix The GNU Free Documentation License, Appendix References and further information, Top
@chapter Appendix The GNU General Public License

@quotation
GNU GENERAL PUBLIC LICENSE
Version 2, June 1991
@end quotation

@quotation
Copyright (C) 1989, 1991 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end quotation

@quotation
Preamble
@end quotation

@quotation
The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software---to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.
@end quotation

@quotation
When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.
@end quotation

@quotation
To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.
@end quotation

@quotation
For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.
@end quotation

@quotation
We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.
@end quotation

@quotation
Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.
@end quotation

@quotation
Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.
@end quotation

@quotation
The precise terms and conditions for copying, distribution and
modification follow.
@end quotation

@quotation
GNU GENERAL PUBLIC LICENSE
TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
@end quotation

@enumerate
@item
This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".
@end enumerate

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

@enumerate
@item
You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.
@end enumerate

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@enumerate
@item
You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

a) You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.

b) You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.

c) If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a
notice that there is no warranty (or else, saying that you provide
a warranty) and that users may redistribute the program under
these conditions, and telling the user how to view a copy of this
License.  (Exception: if the Program itself is interactive but
does not normally print such an announcement, your work based on
the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.
@end enumerate

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@enumerate
@item
You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

a) Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software interchange; or,

b) Accompany it with a written offer, valid for at least three
years, to give any third party, for a charge no more than your
cost of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,

c) Accompany it with the information you received as to the offer
to distribute corresponding source code.  (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such
an offer, in accord with Subsection b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

@enumerate
@item
You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.
@end enumerate

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@enumerate
@item
If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.
@end enumerate

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

@enumerate
@item
If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.
@end enumerate

@quotation
NO WARRANTY
@end quotation

@enumerate
@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@quotation
END OF TERMS AND CONDITIONS
@end quotation

@quotation
How to Apply These Terms to Your New Programs
@end quotation

@quotation
If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.
@end quotation

@quotation
To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.
@end quotation

@quotation
<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>
@end quotation

@quotation
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
@end quotation

@quotation
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
@end quotation

@quotation
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
@end quotation


Also add information on how to contact you by electronic and paper mail.

If the program is interactive, make it output a short notice like this
when it starts in an interactive mode:

@quotation
Gnomovision version 69, Copyright (C) year  name of author
Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
This is free software, and you are welcome to redistribute it
under certain conditions; type `show c' for details.
@end quotation

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, the commands you use may
be called something other than `show w' and `show c'; they could even be
mouse-clicks or menu items---whatever suits your program.

You should also get your employer (if you work as a programmer) or your
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  Here is a sample; alter the names:

@quotation
Yoyodyne, Inc., hereby disclaims all copyright interest in the program
`Gnomovision' (which makes passes at compilers) written by James Hacker.
@end quotation

@quotation
<signature of Ty Coon>, 1 April 1989
Ty Coon, President of Vice
@end quotation

This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.


@node Appendix The GNU Free Documentation License,  , Appendix The GNU General Public License, Top
@chapter Appendix The GNU Free Documentation License

@quotation
GNU Free Documentation License
Version 1.2, November 2002
@end quotation


@quotation
Copyright (C) 2000,2001,2002  Free Software Foundation, Inc.
51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end quotation


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document ``free'' in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The ``Document'', below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as ``you''.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (Thus, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

A section ``Entitled XYZ'' means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as ``Acknowledgements'',
``Dedications'', ``Endorsements'', or ``History''.)  To ``Preserve the Title''
of such a section when you modify the Document means that it remains a
section ``Entitled XYZ'' according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
@quotation
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled ``History'', Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.
K. For any section Entitled ``Acknowledgements'' or ``Dedications'',
Preserve the Title of the section, and preserve in the section all
the substance and tone of each of the contributor acknowledgements
and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.
M. Delete any section Entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled ``Endorsements''
or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.
@end quotation

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled ``History''
in the various original documents, forming one section Entitled
``History''; likewise combine any sections Entitled ``Acknowledgements'',
and any sections Entitled ``Dedications''.  You must delete all sections
Entitled ``Endorsements''.


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an ``aggregate'' if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled ``Acknowledgements'',
``Dedications'', or ``History'', the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@quotation
Copyright (c)  YEAR  YOUR NAME.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end quotation

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the ``with@dots{}Texts.'' line with this:

@quotation
with the Invariant Sections being LIST THEIR TITLES, with the
Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
@end quotation

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.

@bye


@c Local Variables: 
@c mode: texinfo
@c TeX-master: t
@c End: 
